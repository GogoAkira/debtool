#!/bin/bash
#
# Simple tool to facilitate downloading and repacking debian archives


build(){
    if [[ -d $1 ]]; then
        prep "$1"

        if [[ -n $2 ]]; then
            local archive=$2
        else
            # generate archive name from control file
            control=$1/DEBIAN/control
            if [[ ! -f $control || ! -r $control || ! -s $control ]]; then
                error "'$1' is missing control file"
                exit 1
            fi
            local package=$(grep -oP '(?<=Package: ).+' "$control")
            local version=$(grep -oP '(?<=Version: ).+' "$control")
            local arch=$(grep -oP '(?<=Architecture: ).+' "$control")
            local archive=${package}_${version}_${arch}.deb
        fi

        # build the archive
        if fakeroot dpkg-deb --build "$1" "$archive"; then
            echo "Successful build of '$1' to '$archive'"
        else
            error "Failed to build '$1'"
            exit 1
        fi
    else
        if [[ -n $1 ]]; then
            error "'$1' is not a directory"
        else
            error "You have not supplied a directory"
        fi
        exit 1
    fi
}

combo(){
    for package in "$@"; do
        local pre=$(find -maxdepth 1 -type f -iname '*.deb')
        download "$package"
        local post=$(find -maxdepth 1 -type f -iname '*.deb')
        local dirdiff=$(grep -Fxvf <(echo "$pre") <(echo "$post"))
        local count=$(wc -l <<<"$dirdiff")
        if (( count == 0 )); then
            error "Could not identify downloaded package. Unable to unpack '$package'..."
            exit 1
        elif (( count == 1 )); then
            unpack "$dirdiff"
        elif (( count >= 2 )); then
            error "Appear to have download multiple packages. Unable to unpack '$package'..."
            exit 1
        fi
    done
}

download(){
    local successes
    local failures
    for package in "$@"; do
        if apt-get download "$package" &>/dev/null; then
            successes+=("$package")
        else
            failures+=("$package")
        fi
    done

    if (( ${#successes[@]} > 0 )); then
        echo "Successfully downloaded: ${successes[@]}"
    fi

    if (( ${#failures[@]} > 0 )); then
        echo "Failed to download: ${failures[@]}"
        exit 1
    fi
}

error(){
    echo "ERROR: $@" >&2
}

# prepare directory prior to build
prep(){
    # update md5sums if necessary
    if [[ -f $1/DEBIAN/md5sums ]]; then
        ( cd "$1" && find -type f ! -regex '\./DEBIAN/.*' ! -regex '\./etc/.*' -printf '%P\0' | sort -z | xargs -0r md5sum > DEBIAN/md5sums )
    fi
}

unpack(){
    # if argument is a debian archive file
    if dpkg-deb --info "$1" &>/dev/null; then
        local pkgtype=archive
        if [[ -n $2 ]]; then
            local target=$2
        else
            local target=${1%.*}
        fi

        if [[ -e $target ]]; then
            error "Destination '$target' already exists. Unable to unpack '$1'..."
            exit 1
        fi

        dpkg-deb --raw-extract "$1" "$target"
    # if argument is an installed package
    elif dpkg-query --status "$1" 2>/dev/null | grep -q '^Status: install ok installed$'; then
        local pkgtype=installation
        if [[ -n $2 ]]; then
            local target=$2
        else
            local target=$1
        fi

        if [[ -e $target ]]; then
            error "Destination '$target' already exists. Unable to unpack '$1'..."
            exit 1
        fi

        # unpack into tmpfolder
        local tmpfolder=$(fakeroot -u dpkg-repack --generate "$1" 2>/dev/null | awk '{print $(NF-2)}')

        # rename tmpfolder to target then clean up control file modified by dpkg-repack
        mv "$tmpfolder" "$target" 2>/dev/null && \
        sed -i 's/ .$//;/ (Repackaged on .* by dpkg-repack.)/d' "$target/DEBIAN/control" 2>/dev/null
    else
        if [[ -n $1 ]]; then
            error "'$1' is not an installed package or valid debian archive"
        else
            error "You have not supplied a package to unpack"
        fi
        exit 1
    fi

    # check if target directory exists
    if [[ -d $target ]]; then
        echo "Successfully unpacked $pkgtype: $target"
    else
        error "Failed to generate folder '$target' for '$1'"
        exit 1
    fi
}


if (( $# == 0 )); then
    error "Missing operand"
    echo "Try 'chmod --help' for more information." >&2
    exit 1
elif (( $# == 1 )) && [[ $1 =~ ^(-h|--help|help)$ ]]; then
    echo "Usage: ${0##*/} OPTION [ARCHIVE|DIRECTORY|PACKAGE] [TARGET]"
    echo "Manipulate debian archives."
    echo
    echo "  -b, --build           create a debian archive from DIR"
    echo "  -c, --combo           download then unpack PKG(s)"
    echo "  -d, --download        download PKGS(s) via apt-get"
    echo "  -u, --unpack          unpack ARCHIVE or installed PKG into DIR"
    echo
    echo "NOTE: ARCHIVE refers to a '.deb' debian archive. PKG refers to" \
         "program available to download or an installed program to unpack."
    exit 0
elif [[ $1 =~ ^(-b|--build)$ ]]; then
    build "${@:2}"
elif [[ $1 =~ ^(-c|--combo)$ ]]; then
    combo "${@:2}"
elif [[ $1 =~ ^(-d|--download)$ ]]; then
    download "${@:2}"
elif [[ $1 =~ ^(-u|--unpack)$ ]]; then
    unpack "${@:2}"
else
    error "Invalid option"
    exit 1
fi
